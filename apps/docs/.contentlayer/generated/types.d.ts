// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'


export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Block = {
  /** ID */
  _id: string
  _raw: Record<string, any>
  type: 'Block'
  parameters: ('Rich Text' | 'Color' | 'Caption' | 'Url' | 'Icon' | 'Language' | 'Children' | 'File' | 'Plain text' | 'Bold' | 'Italic' | 'Href' | 'Strikethrough' | 'Underline' | 'Code' | 'Emoji' | 'Width' | 'Has Column Header' | 'Has Row Header' | 'Checked')[]
  description?: string | undefined
  requireClient?: boolean | undefined
  blockType?: string | undefined
  notionReference?: string | undefined
  name: string
  /** The page content */
  body: Body
  slug: string
}

export type Guide = {
  /** ID */
  _id: string
  _raw: Record<string, any>
  type: 'Guide'
  order?: number | undefined
  name: string
  /** The page content */
  body: Body
  slug: string
}

export type Plugin = {
  /** ID */
  _id: string
  _raw: Record<string, any>
  type: 'Plugin'
  npm?: string | undefined
  github?: string | undefined
  name: string
  /** The page content */
  body: Body
  slug: string
}  

/** Nested types */
/** The body generated using page content */
export type Body = {
  /** ID */
  _id: string
  _raw: Record<string, any>
  type: 'Body'
  /** The HTML body */
  html: string

}

/** Nested type definition for Notion date properties */
export type DateRange = {
  /** ID */
  _id: string
  _raw: Record<string, any>
  type: 'DateRange'
  start: IsoDateTimeString
  end?: IsoDateTimeString | undefined
  timezone?: string | undefined

}

/** Nested type definition for Notion people properties */
export type User = {
  /** ID */
  _id: string
  _raw: Record<string, any>
  type: 'User'
  /** The user name */
  name?: string | undefined
  /** The user avatar */
  avatarUrl?: string | undefined
  /** User email address, only if the user is a person and the integration has user capabilities to access email addresses. */
  email?: string | undefined
  /** User workspace owner, only if the user is a bot */
  workspace?: string | undefined

}  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Block | Guide | Plugin
export type DocumentTypeNames = 'Block' | 'Guide' | 'Plugin'

export type NestedTypes = Body | DateRange | User
export type NestedTypeNames = 'Body' | 'DateRange' | 'User'

export type DataExports = {
  allDocuments: DocumentTypes[]
  allBlocks: Block[]
  allGuides: Guide[]
  allPlugins: Plugin[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Block: Block
  Guide: Guide
  Plugin: Plugin
}

export type NestedTypeMap = {
  Body: Body
  DateRange: DateRange
  User: User
}

 